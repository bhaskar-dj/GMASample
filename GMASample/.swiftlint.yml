# https://realm.github.io/SwiftLint/closure_end_indentation.html
opt_in_rules:
  - closure_end_indentation # Autcorrect: Yes. Closure end should have the same indentation as the line that started it.
  - closure_spacing # Autocorrect: Yes. Closure expressions should have a single space inside each brace.
  - closure_parameter_position # Autocorrect: No. Closure parameters should be on the same line as opening brace.
  - contains_over_first_not_nil # Autocorrect: No. Prefer contains over first(where:) != nil and firstIndex(where:) != nil.
  - empty_count # Autocorrect: No. Prefer checking isEmpty over comparing count to zero.
  - explicit_init # Autocorrect: Yes. Explicitly calling .init() should be avoided.
  - first_where # Autocorrect: No. Prefer using .first(where:) over .filter { }.first in collections.
  - joined_default_parameter # Autocorrect: Yes. Discouraged explicit usage of the default separator.
  - literal_expression_end_indentation # Autocorrect: Yes. Array and dictionary literal end should have the same indentation as the line that started it.
  - multiline_arguments # Autocorrect: No. Arguments should be either on the same line, or one per line.
  - multiline_parameters # Autocorrect: No. Functions and methods parameters should be either on the same line, or one per line.
  - notification_center_detachment # Autocorrect: No. An object should only remove itself as an observer in deinit.
  - operator_usage_whitespace # Autocorrect: Yes. Operators should be surrounded by a single whitespace when they are being used.
  - opening_brace # Autcorrect: Yes. Opening braces should be preceded by a single space and on the same line as the declaration.
  - overridden_super_call # Autocorrect: No. Some overridden methods should always call super
  - private_action # Autocorrect: No. IBActions should be private.
  # - private_outlet
  - prohibited_super_call # Autocorrect: No. Some methods should not call super
  - redundant_nil_coalescing # Autocorrect: Yes. nil coalescing operator is only evaluated if the lhs is nil, coalescing operator with nil as rhs is redundant
  - redundant_optional_initialization # Autocorrect: Yes. Initializing an optional variable with nil is redundant.
  # - sorted_first_last
  - switch_case_on_newline # Autocorrect: No. Cases inside a switch should always be on a newline
  - trailing_closure # Autocorrect: No. Trailing closure syntax should be used whenever possible.
  - trailing_comma # Autocorrect: Yes. Trailing commas in arrays and dictionaries should be avoided/enforced.
  # - unneeded_parentheses_in_closure_argument
  - vertical_parameter_alignment_on_call # Autocorrect: No. Function parameters should be aligned vertically if theyâ€™re in multiple lines in a method call.
  - yoda_condition # Autocorrect: No. The variable should be placed on the left, the constant on the right of a comparison operator.

disabled_rules:
  #- xctfail_message # Autocorrect: No. An XCTFail call should include a description of the assertion.
  - force_cast # There are quite a few likely cases to force cast. E.g. when the cell type is guaranteed
  - unneeded_notification_center_removal

file_length:
  warning: 500

type_body_length:
  warning: 300

function_body_length:
  warning: 50

line_length:
  warning: 280
  error: 300
  ignores_interpolated_strings: true
  ignores_urls: true
  ignores_comments: true

identifier_name:
  excluded:
    - x
    - y

excluded:
  - WSJTests
  - WSJ Tests
  - WSJ Extension Tests
